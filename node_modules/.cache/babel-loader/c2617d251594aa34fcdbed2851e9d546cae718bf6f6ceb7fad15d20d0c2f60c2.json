{"ast":null,"code":"import api from \"../http\";\nexport const register = async user => {\n  try {\n    var re = api.post(\"https://localhost:7055/User/CreateUser\", user);\n    console.log(re);\n    return re;\n  } catch (e) {\n    console.log(1);\n  }\n};\n\n//Валидация\nexport const isFormValid = (user, passwordRepeat) => {\n  var reply = {\n    status: true,\n    name: false,\n    surname: false,\n    email: false,\n    password: false,\n    passwordRepeat: false\n  };\n  if (!validateName(user === null || user === void 0 ? void 0 : user.name)) {\n    reply.name = true;\n    reply.status = false;\n  }\n  if (!validateSurname(user === null || user === void 0 ? void 0 : user.surname)) {\n    reply.surname = true;\n    reply.status = false;\n  }\n  if (!validateEmail(user === null || user === void 0 ? void 0 : user.email)) {\n    reply.email = true;\n    reply.status = false;\n  }\n  if (!validatePassword(user === null || user === void 0 ? void 0 : user.password)) {\n    reply.password = true;\n    reply.status = false;\n  }\n  if (!validatePasswordRepeat(user === null || user === void 0 ? void 0 : user.password, passwordRepeat)) {\n    reply.passwordRepeat = true;\n    reply.status = false;\n  }\n  return reply;\n};\n\n//Валидация имени\nconst validateName = name => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(name) && name[0] == name[0].toUpperCase();\n};\n\n//Валидация Фамилии\nconst validateSurname = surname => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(surname) && surname[0] == surname[0].toUpperCase();\n};\n\n//Валидация email\nconst validateEmail = email => {\n  return email.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\n//Валидация password\nconst validatePassword = password => {\n  var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\n  return re.test(password);\n};\n\n//Проверка повтора пароля\nconst validatePasswordRepeat = (password, passwordRepeat) => {\n  return password == passwordRepeat && !!passwordRepeat.length;\n};","map":{"version":3,"names":["api","register","user","re","post","console","log","e","isFormValid","passwordRepeat","reply","status","name","surname","email","password","validateName","validateSurname","validateEmail","validatePassword","validatePasswordRepeat","test","toUpperCase","match","length"],"sources":["C:/Users/sw1rl/Documents/Projects/cogni/CogniProject/CogniReact/src/services/auth.js"],"sourcesContent":["import api from \"../http\";\r\n\r\nexport const register = async (user) => {\r\n    try {\r\n        var re = api.post(\"https://localhost:7055/User/CreateUser\", user);\r\n        console.log(re);\r\n        return re;\r\n    } catch(e) {\r\n        console.log(1);\r\n    }\r\n}\r\n\r\n//Валидация\r\nexport const isFormValid = (user, passwordRepeat) => {\r\n    var reply = {status: true, name: false, surname: false, email: false, password: false, passwordRepeat: false};\r\n\r\n    if (!validateName(user?.name)) {\r\n        reply.name = true;\r\n        reply.status = false;\r\n    }\r\n    if (!validateSurname(user?.surname)) {\r\n        reply.surname = true;\r\n        reply.status = false;\r\n    }\r\n    if (!validateEmail(user?.email)) {\r\n        reply.email = true;\r\n        reply.status = false;\r\n    }\r\n    if (!validatePassword(user?.password)) {\r\n        reply.password = true;\r\n        reply.status = false;\r\n    }\r\n    if (!validatePasswordRepeat(user?.password, passwordRepeat)) {\r\n        reply.passwordRepeat = true;\r\n        reply.status = false;\r\n    }\r\n    return reply;\r\n};\r\n\r\n\r\n//Валидация имени\r\nconst validateName = (name) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(name) && name[0] == name[0].toUpperCase();\r\n};\r\n\r\n//Валидация Фамилии\r\nconst validateSurname = (surname) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(surname) && surname[0] == surname[0].toUpperCase();\r\n};\r\n\r\n//Валидация email\r\nconst validateEmail = (email) => {\r\n    return email.match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\n//Валидация password\r\nconst validatePassword = (password) => {\r\n    var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\r\n    return re.test(password);\r\n};\r\n\r\n//Проверка повтора пароля\r\nconst validatePasswordRepeat = (password, passwordRepeat) => {\r\n    return password == passwordRepeat && !!passwordRepeat.length;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}