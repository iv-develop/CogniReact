{"ast":null,"code":"import axios from \"axios\";\nexport const createUser = async user => {\n  try {\n    var response = await axios.post(\"https://localhost:7055/User/CreateUser\", user);\n    return response.status;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//Валидация\nexport const isFormValid = user => {\n  var status = {\n    status: true,\n    name: null,\n    surname: null,\n    email: null,\n    password: null,\n    passwordRepeat: null\n  };\n  if (!validateName(user === null || user === void 0 ? void 0 : user.name)) {\n    status.name = \"Имя должно начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\n    status.status = false;\n  }\n  if (!validateSurname(user === null || user === void 0 ? void 0 : user.surname)) {\n    status.surname = \"Фамилия должна начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\n    status.status = false;\n  }\n  if (!validateEmail(user === null || user === void 0 ? void 0 : user.email)) {\n    status.email = \"Email указан не верно\";\n    status.status = false;\n  }\n  if (!validatePassword(user === null || user === void 0 ? void 0 : user.password)) {\n    status.password = \"Пароль должен состоять минимум из 8 символов и содержать хотя бы одну цифру/букву и также хотябы один из символов: !@#$%^&*\";\n    status.status = false;\n  }\n  return status;\n};\n\n//Валидация имени\nconst validateName = name => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(name) && name[0] == name[0].toUpperCase();\n};\n\n//Валидация Фамилии\nconst validateSurname = surname => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(surname) && surname[0] == surname[0].toUpperCase();\n};\n\n//Валидация email\nconst validateEmail = email => {\n  return email.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\n//Валидация password\nconst validatePassword = password => {\n  var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\n  return re.test(password);\n};","map":{"version":3,"names":["axios","createUser","user","response","post","status","e","console","error","isFormValid","name","surname","email","password","passwordRepeat","validateName","validateSurname","validateEmail","validatePassword","re","test","toUpperCase","match"],"sources":["C:/Users/sw1rl/Documents/Projects/cogni/CogniProject/CogniReact/src/services/auth.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\nexport const createUser = async (user) => {\r\n    try {\r\n        var response = await axios.post(\"https://localhost:7055/User/CreateUser\", user);\r\n\r\n        return response.status;\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\n//Валидация\r\nexport const isFormValid = (user) => {\r\n    var status = {status: true, name: null, surname: null, email: null, password: null, passwordRepeat: null};\r\n\r\n    if (!validateName(user?.name)) {\r\n        status.name = \"Имя должно начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\r\n        status.status = false;\r\n    }\r\n    if (!validateSurname(user?.surname)) {\r\n        status.surname = \"Фамилия должна начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\r\n        status.status = false;\r\n    }\r\n    if (!validateEmail(user?.email)) {\r\n        status.email = \"Email указан не верно\";\r\n        status.status = false;\r\n    }\r\n    if (!validatePassword(user?.password)) {\r\n        status.password = \"Пароль должен состоять минимум из 8 символов и содержать хотя бы одну цифру/букву и также хотябы один из символов: !@#$%^&*\";\r\n        status.status = false;\r\n    }\r\n    return status;\r\n};\r\n\r\n\r\n//Валидация имени\r\nconst validateName = (name) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(name) && name[0] == name[0].toUpperCase();\r\n};\r\n\r\n//Валидация Фамилии\r\nconst validateSurname = (surname) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(surname) && surname[0] == surname[0].toUpperCase();\r\n};\r\n\r\n//Валидация email\r\nconst validateEmail = (email) => {\r\n    return email.match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\n//Валидация password\r\nconst validatePassword = (password) => {\r\n    var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\r\n    return re.test(password);\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,IAAI;IACA,IAAIC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,wCAAwC,EAAEF,IAAI,CAAC;IAE/E,OAAOC,QAAQ,CAACE,MAAM;EAC1B,CAAC,CAAC,OAAMC,CAAC,EAAE;IACPC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EACpB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAIP,IAAI,IAAK;EACjC,IAAIG,MAAM,GAAG;IAACA,MAAM,EAAE,IAAI;IAAEK,IAAI,EAAE,IAAI;IAAEC,OAAO,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,QAAQ,EAAE,IAAI;IAAEC,cAAc,EAAE;EAAI,CAAC;EAEzG,IAAI,CAACC,YAAY,CAACb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,IAAI,CAAC,EAAE;IAC3BL,MAAM,CAACK,IAAI,GAAG,iGAAiG;IAC/GL,MAAM,CAACA,MAAM,GAAG,KAAK;EACzB;EACA,IAAI,CAACW,eAAe,CAACd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,OAAO,CAAC,EAAE;IACjCN,MAAM,CAACM,OAAO,GAAG,qGAAqG;IACtHN,MAAM,CAACA,MAAM,GAAG,KAAK;EACzB;EACA,IAAI,CAACY,aAAa,CAACf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,KAAK,CAAC,EAAE;IAC7BP,MAAM,CAACO,KAAK,GAAG,uBAAuB;IACtCP,MAAM,CAACA,MAAM,GAAG,KAAK;EACzB;EACA,IAAI,CAACa,gBAAgB,CAAChB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,QAAQ,CAAC,EAAE;IACnCR,MAAM,CAACQ,QAAQ,GAAG,6HAA6H;IAC/IR,MAAM,CAACA,MAAM,GAAG,KAAK;EACzB;EACA,OAAOA,MAAM;AACjB,CAAC;;AAGD;AACA,MAAMU,YAAY,GAAIL,IAAI,IAAK;EAC3B,IAAIS,EAAE,GAAG,oBAAoB;EAC7B,OAAOA,EAAE,CAACC,IAAI,CAACV,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACW,WAAW,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA,MAAML,eAAe,GAAIL,OAAO,IAAK;EACjC,IAAIQ,EAAE,GAAG,oBAAoB;EAC7B,OAAOA,EAAE,CAACC,IAAI,CAACT,OAAO,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACU,WAAW,CAAC,CAAC;AACrE,CAAC;;AAED;AACA,MAAMJ,aAAa,GAAIL,KAAK,IAAK;EAC7B,OAAOA,KAAK,CAACU,KAAK,CAChB,2JACF,CAAC;AACL,CAAC;;AAED;AACA,MAAMJ,gBAAgB,GAAIL,QAAQ,IAAK;EACnC,IAAIM,EAAE,GAAG,+CAA+C;EACxD,OAAOA,EAAE,CAACC,IAAI,CAACP,QAAQ,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}