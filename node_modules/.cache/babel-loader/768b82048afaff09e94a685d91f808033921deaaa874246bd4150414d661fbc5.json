{"ast":null,"code":"import axios from \"axios\";\nexport const createUser = async user => {\n  try {\n    var response = await axios.post(\"https://localhost:7055/User/CreateUser\", user);\n    return response.status;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n//Валидация\nexport const isFormValid = user => {\n  var error = {\n    status: true,\n    name: null,\n    surname: null,\n    email: null,\n    password: null\n  };\n  if (!validateName(user === null || user === void 0 ? void 0 : user.name)) {\n    error.name = \"Имя должно начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\n    error.status = false;\n  }\n  if (!validateSurname(user === null || user === void 0 ? void 0 : user.surname)) {\n    error.surname = \"Фамилия должна начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\n    error.status = false;\n  }\n  if (!validateEmail(user === null || user === void 0 ? void 0 : user.email)) {\n    error.email = \"Email указан не верно\";\n    error.status = false;\n  }\n  if (!validatePassword(user === null || user === void 0 ? void 0 : user.password)) {\n    error.password = \"Пароль должен состоять минимум из 8 символов и содержать хотя бы одну цифру/букву и также хотябы один из символов: !@#$%^&*\";\n    error.status = false;\n  }\n  return error;\n};\n\n//Валидация имени\nconst validateName = name => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(name);\n};\n\n//Валидация Фамилии\nconst validateSurname = surname => {\n  var re = /^[\\u0400-\\u04FF]+$/;\n  return re.test(surname);\n};\n\n//Валидация email\nconst validateEmail = email => {\n  return email.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\n//Валидация password\nconst validatePassword = password => {\n  var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\n  return re.test(password);\n};","map":{"version":3,"names":["axios","createUser","user","response","post","status","e","console","error","isFormValid","name","surname","email","password","validateName","validateSurname","validateEmail","validatePassword","re","test","match"],"sources":["C:/Users/sw1rl/Documents/Projects/cogni/CogniProject/CogniReact/src/services/auth.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\nexport const createUser = async (user) => {\r\n    try {\r\n        var response = await axios.post(\"https://localhost:7055/User/CreateUser\", user);\r\n\r\n        return response.status;\r\n    } catch(e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\n//Валидация\r\nexport const isFormValid = (user) => {\r\n    var error = {status: true, name: null, surname: null, email: null, password: null};\r\n\r\n    if (!validateName(user?.name)) {\r\n        error.name = \"Имя должно начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\r\n        error.status = false;\r\n    }\r\n    if (!validateSurname(user?.surname)) {\r\n        error.surname = \"Фамилия должна начинаться с заглавной буквы, быть написано на русском и содержать минимум 2 символа\";\r\n        error.status = false;\r\n    }\r\n    if (!validateEmail(user?.email)) {\r\n        error.email = \"Email указан не верно\";\r\n        error.status = false;\r\n    }\r\n    if (!validatePassword(user?.password)) {\r\n        error.password = \"Пароль должен состоять минимум из 8 символов и содержать хотя бы одну цифру/букву и также хотябы один из символов: !@#$%^&*\";\r\n        error.status = false;\r\n    }\r\n    return error;\r\n};\r\n\r\n\r\n//Валидация имени\r\nconst validateName = (name) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(name);\r\n};\r\n\r\n//Валидация Фамилии\r\nconst validateSurname = (surname) => {\r\n    var re = /^[\\u0400-\\u04FF]+$/;\r\n    return re.test(surname);\r\n};\r\n\r\n//Валидация email\r\nconst validateEmail = (email) => {\r\n    return email.match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\n//Валидация password\r\nconst validatePassword = (password) => {\r\n    var re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$/;\r\n    return re.test(password);\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtC,IAAI;IACA,IAAIC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,wCAAwC,EAAEF,IAAI,CAAC;IAE/E,OAAOC,QAAQ,CAACE,MAAM;EAC1B,CAAC,CAAC,OAAMC,CAAC,EAAE;IACPC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EACpB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAIP,IAAI,IAAK;EACjC,IAAIM,KAAK,GAAG;IAACH,MAAM,EAAE,IAAI;IAAEK,IAAI,EAAE,IAAI;IAAEC,OAAO,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAI,CAAC;EAElF,IAAI,CAACC,YAAY,CAACZ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,IAAI,CAAC,EAAE;IAC3BF,KAAK,CAACE,IAAI,GAAG,iGAAiG;IAC9GF,KAAK,CAACH,MAAM,GAAG,KAAK;EACxB;EACA,IAAI,CAACU,eAAe,CAACb,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,OAAO,CAAC,EAAE;IACjCH,KAAK,CAACG,OAAO,GAAG,qGAAqG;IACrHH,KAAK,CAACH,MAAM,GAAG,KAAK;EACxB;EACA,IAAI,CAACW,aAAa,CAACd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEU,KAAK,CAAC,EAAE;IAC7BJ,KAAK,CAACI,KAAK,GAAG,uBAAuB;IACrCJ,KAAK,CAACH,MAAM,GAAG,KAAK;EACxB;EACA,IAAI,CAACY,gBAAgB,CAACf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,QAAQ,CAAC,EAAE;IACnCL,KAAK,CAACK,QAAQ,GAAG,6HAA6H;IAC9IL,KAAK,CAACH,MAAM,GAAG,KAAK;EACxB;EACA,OAAOG,KAAK;AAChB,CAAC;;AAGD;AACA,MAAMM,YAAY,GAAIJ,IAAI,IAAK;EAC3B,IAAIQ,EAAE,GAAG,oBAAoB;EAC7B,OAAOA,EAAE,CAACC,IAAI,CAACT,IAAI,CAAC;AACxB,CAAC;;AAED;AACA,MAAMK,eAAe,GAAIJ,OAAO,IAAK;EACjC,IAAIO,EAAE,GAAG,oBAAoB;EAC7B,OAAOA,EAAE,CAACC,IAAI,CAACR,OAAO,CAAC;AAC3B,CAAC;;AAED;AACA,MAAMK,aAAa,GAAIJ,KAAK,IAAK;EAC7B,OAAOA,KAAK,CAACQ,KAAK,CAChB,2JACF,CAAC;AACL,CAAC;;AAED;AACA,MAAMH,gBAAgB,GAAIJ,QAAQ,IAAK;EACnC,IAAIK,EAAE,GAAG,+CAA+C;EACxD,OAAOA,EAAE,CAACC,IAAI,CAACN,QAAQ,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}